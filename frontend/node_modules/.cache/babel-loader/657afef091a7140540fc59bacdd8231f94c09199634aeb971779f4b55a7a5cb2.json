{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ianta\\\\interior_design\\\\interior_design\\\\frontend\\\\src\\\\img_input\\\\ClientImg.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cookies from \"js-cookie\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ClientImg() {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const csrfToken = Cookies.get(\"csrftoken\");\n  const handleImageUpload = async event => {\n    const file = event.target.files[0];\n    setSelectedImage(file);\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    try {\n      await fetch(\"http://127.0.0.1:8000/upload/\", {\n        method: \"POST\",\n        headers: {\n          \"X-CSRFToken\": csrfToken\n        },\n        body: formData\n      });\n      console.log(\"Image uploaded successfully!\");\n      console.log(Cookies.get(\"csrftoken\"));\n    } catch (error) {\n      console.log(Cookies.get(\"csrftoken\"));\n      console.error(\"Error uploading image:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Image Uploader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      onChange: handleImageUpload\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Image:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: URL.createObjectURL(selectedImage),\n        alt: \"Selected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n_s(ClientImg, \"gNHFCSJ3h3sH8HFrpxN7hUqoxHs=\");\n_c = ClientImg;\nexport default ClientImg;\n\n// This is the same code but uses axios instead.\n// import React, { useState } from \"react\";\n// import axios from \"axios\";\n// import Cookies from \"js-cookie\";\n\n// function ClientImg() {\n//   const [selectedImage, setSelectedImage] = useState(null);\n//   //   const csrfToken = Cookies.get(\"csrftoken\");\n//   //   axios.defaults.headers.common[\"X-CSRFToken\"] = csrfToken;\n//   // Perhaps I'll do fetch instead....\n//   // Definitlye try fetch instead.\n\n//   const handleImageUpload = async (event) => {\n//     const file = event.target.files[0];\n//     setSelectedImage(file);\n\n//     const formData = new FormData();\n//     formData.append(\"image\", file);\n\n//     try {\n//       await axios.post(\"http://127.0.0.1:8000/upload/\", formData, {\n//         headers: {\n//           \"Content-Type\": \"multipart/form-data\",\n//           \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\n//         },\n//       });\n//       console.log(\"Image uploaded successfully!\");\n//     } catch (error) {\n//       console.log(Cookies.get(\"csrftoken\"));\n//       console.error(\"Error uploading image:\", error);\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h2>Image Uploader</h2>\n//       <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n//       {selectedImage && (\n//         <div>\n//           <h3>Selected Image:</h3>\n//           <img src={URL.createObjectURL(selectedImage)} alt=\"Selected\" />\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default ClientImg;\nvar _c;\n$RefreshReg$(_c, \"ClientImg\");","map":{"version":3,"names":["React","useState","Cookies","jsxDEV","_jsxDEV","ClientImg","_s","selectedImage","setSelectedImage","csrfToken","get","handleImageUpload","event","file","target","files","formData","FormData","append","fetch","method","headers","body","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","src","URL","createObjectURL","alt","_c","$RefreshReg$"],"sources":["C:/Users/ianta/interior_design/interior_design/frontend/src/img_input/ClientImg.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\n\r\nfunction ClientImg() {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const csrfToken = Cookies.get(\"csrftoken\");\r\n\r\n  const handleImageUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedImage(file);\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"image\", file);\r\n\r\n    try {\r\n      await fetch(\"http://127.0.0.1:8000/upload/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"X-CSRFToken\": csrfToken,\r\n        },\r\n        body: formData,\r\n      });\r\n\r\n      console.log(\"Image uploaded successfully!\");\r\n      console.log(Cookies.get(\"csrftoken\"));\r\n    } catch (error) {\r\n      console.log(Cookies.get(\"csrftoken\"));\r\n      console.error(\"Error uploading image:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Image Uploader</h2>\r\n      <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n      {selectedImage && (\r\n        <div>\r\n          <h3>Selected Image:</h3>\r\n          <img src={URL.createObjectURL(selectedImage)} alt=\"Selected\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ClientImg;\r\n\r\n// This is the same code but uses axios instead.\r\n// import React, { useState } from \"react\";\r\n// import axios from \"axios\";\r\n// import Cookies from \"js-cookie\";\r\n\r\n// function ClientImg() {\r\n//   const [selectedImage, setSelectedImage] = useState(null);\r\n//   //   const csrfToken = Cookies.get(\"csrftoken\");\r\n//   //   axios.defaults.headers.common[\"X-CSRFToken\"] = csrfToken;\r\n//   // Perhaps I'll do fetch instead....\r\n//   // Definitlye try fetch instead.\r\n\r\n//   const handleImageUpload = async (event) => {\r\n//     const file = event.target.files[0];\r\n//     setSelectedImage(file);\r\n\r\n//     const formData = new FormData();\r\n//     formData.append(\"image\", file);\r\n\r\n//     try {\r\n//       await axios.post(\"http://127.0.0.1:8000/upload/\", formData, {\r\n//         headers: {\r\n//           \"Content-Type\": \"multipart/form-data\",\r\n//           \"X-CSRFToken\": Cookies.get(\"csrftoken\"),\r\n//         },\r\n//       });\r\n//       console.log(\"Image uploaded successfully!\");\r\n//     } catch (error) {\r\n//       console.log(Cookies.get(\"csrftoken\"));\r\n//       console.error(\"Error uploading image:\", error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h2>Image Uploader</h2>\r\n//       <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n//       {selectedImage && (\r\n//         <div>\r\n//           <h3>Selected Image:</h3>\r\n//           <img src={URL.createObjectURL(selectedImage)} alt=\"Selected\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default ClientImg;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAMQ,SAAS,GAAGP,OAAO,CAACQ,GAAG,CAAC,WAAW,CAAC;EAE1C,MAAMC,iBAAiB,GAAG,MAAOC,KAAK,IAAK;IACzC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClCP,gBAAgB,CAACK,IAAI,CAAC;IAEtB,MAAMG,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEL,IAAI,CAAC;IAE9B,IAAI;MACF,MAAMM,KAAK,CAAC,+BAA+B,EAAE;QAC3CC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,aAAa,EAAEZ;QACjB,CAAC;QACDa,IAAI,EAAEN;MACR,CAAC,CAAC;MAEFO,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;MAC3CD,OAAO,CAACC,GAAG,CAACtB,OAAO,CAACQ,GAAG,CAAC,WAAW,CAAC,CAAC;IACvC,CAAC,CAAC,OAAOe,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACtB,OAAO,CAACQ,GAAG,CAAC,WAAW,CAAC,CAAC;MACrCa,OAAO,CAACE,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAChD;EACF,CAAC;EAED,oBACErB,OAAA;IAAAsB,QAAA,gBACEtB,OAAA;MAAAsB,QAAA,EAAI;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACvB1B,OAAA;MAAO2B,IAAI,EAAC,MAAM;MAACC,MAAM,EAAC,SAAS;MAACC,QAAQ,EAAEtB;IAAkB;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAClEvB,aAAa,iBACZH,OAAA;MAAAsB,QAAA,gBACEtB,OAAA;QAAAsB,QAAA,EAAI;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxB1B,OAAA;QAAK8B,GAAG,EAAEC,GAAG,CAACC,eAAe,CAAC7B,aAAa,CAAE;QAAC8B,GAAG,EAAC;MAAU;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5D,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACxB,EAAA,CAxCQD,SAAS;AAAAiC,EAAA,GAATjC,SAAS;AA0ClB,eAAeA,SAAS;;AAExB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}