{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ianta\\\\interior_design\\\\interior_design\\\\frontend\\\\src\\\\api\\\\FrontendApi.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport ClientImg from \"../img_input/ClientImg\";\nimport ClientImgOut from \"../img_output/ClientImgOut\";\nimport ProcessClientImg from \"../img_input/ProcessClientImg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FrontendApi = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [isPreviousRequestFinished, setIsPreviousRequestFinished] = useState(false);\n\n  // Callback function to be called when the previous request finishes\n  const handlePreviousRequestFinish = () => {\n    setIsPreviousRequestFinished(true);\n  };\n  useEffect(() => {\n    // Make a GET request to your Django API endpoint\n    axios.get(\"http://127.0.0.1:8000/data/\").then(response => {\n      setData(response.data);\n    }).catch(error => {\n      console.error(error);\n    });\n  }, []);\n  console.log(isPreviousRequestFinished);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Displays test data from backend if Django server is on\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), data.map(item => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: item.name\n    }, item.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(ProcessClientImg, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(FrontendApi, \"Kv0LYwQTjnDlxfn+/GD5rO6maDg=\");\n_c = FrontendApi;\nexport default FrontendApi;\nvar _c;\n$RefreshReg$(_c, \"FrontendApi\");","map":{"version":3,"names":["React","useEffect","useState","axios","ClientImg","ClientImgOut","ProcessClientImg","jsxDEV","_jsxDEV","FrontendApi","_s","data","setData","isPreviousRequestFinished","setIsPreviousRequestFinished","handlePreviousRequestFinish","get","then","response","catch","error","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","name","id","_c","$RefreshReg$"],"sources":["C:/Users/ianta/interior_design/interior_design/frontend/src/api/FrontendApi.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport ClientImg from \"../img_input/ClientImg\";\r\nimport ClientImgOut from \"../img_output/ClientImgOut\";\r\nimport ProcessClientImg from \"../img_input/ProcessClientImg\";\r\n\r\nconst FrontendApi = () => {\r\n  const [data, setData] = useState([]);\r\n  const [isPreviousRequestFinished, setIsPreviousRequestFinished] =\r\n    useState(false);\r\n\r\n  // Callback function to be called when the previous request finishes\r\n  const handlePreviousRequestFinish = () => {\r\n    setIsPreviousRequestFinished(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Make a GET request to your Django API endpoint\r\n    axios\r\n      .get(\"http://127.0.0.1:8000/data/\")\r\n      .then((response) => {\r\n        setData(response.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, []);\r\n  console.log(isPreviousRequestFinished);\r\n  return (\r\n    <div>\r\n      <h1>Displays test data from backend if Django server is on</h1>\r\n      {/* Display the fetched data */}\r\n      {data.map((item) => (\r\n        <p key={item.id}>{item.name}</p>\r\n      ))}\r\n      <ProcessClientImg />\r\n      {/* <ClientImg onFinished={handlePreviousRequestFinish} />\r\n      {isPreviousRequestFinished && <ClientImgOut />} */}\r\n    </div>\r\n  );\r\n};\r\nexport default FrontendApi;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,YAAY,MAAM,4BAA4B;AACrD,OAAOC,gBAAgB,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,yBAAyB,EAAEC,4BAA4B,CAAC,GAC7DZ,QAAQ,CAAC,KAAK,CAAC;;EAEjB;EACA,MAAMa,2BAA2B,GAAGA,CAAA,KAAM;IACxCD,4BAA4B,CAAC,IAAI,CAAC;EACpC,CAAC;EAEDb,SAAS,CAAC,MAAM;IACd;IACAE,KAAK,CACFa,GAAG,CAAC,6BAA6B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAK;MAClBN,OAAO,CAACM,QAAQ,CAACP,IAAI,CAAC;IACxB,CAAC,CAAC,CACDQ,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACtB,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EACNC,OAAO,CAACC,GAAG,CAACT,yBAAyB,CAAC;EACtC,oBACEL,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAsD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAE9DhB,IAAI,CAACiB,GAAG,CAAEC,IAAI,iBACbrB,OAAA;MAAAe,QAAA,EAAkBM,IAAI,CAACC;IAAI,GAAnBD,IAAI,CAACE,EAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAgB,CAChC,CAAC,eACFnB,OAAA,CAACF,gBAAgB;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGjB,CAAC;AAEV,CAAC;AAACjB,EAAA,CAlCID,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AAmCjB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}