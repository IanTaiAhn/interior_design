{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ianta\\\\interior_design\\\\interior_design\\\\frontend\\\\src\\\\img_input\\\\ClientImg.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Grid, Typography } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ClientImg() {\n  _s();\n  const [selectedImage, setSelectedImage] = useState(null);\n  const [processedImage, setProcessedImage] = useState(null);\n  const handleImageUpload = async event => {\n    const file = event.target.files[0];\n    setSelectedImage(file);\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    try {\n      const response = await fetch(\"http://localhost:8000/upload/\", {\n        method: \"POST\",\n        body: formData\n      });\n      if (response.ok) {\n        const imageBlob = await response.blob();\n        const imageUrl = URL.createObjectURL(imageBlob);\n        setProcessedImage(imageUrl);\n      } else {\n        console.error(\"Error:\", response.status);\n      }\n    } catch (error) {\n      console.error(\"Error uploading image:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Selected Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleImageUpload\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), selectedImage && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: URL.createObjectURL(selectedImage),\n          alt: \"Selected\",\n          style: {\n            maxWidth: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Processed Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), processedImage ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: processedImage,\n          alt: \"Processed\",\n          style: {\n            maxWidth: \"100%\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Typography, {\n        children: \"No image processed yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n//   return (\n//     <div>\n//       <h2>Image Uploader</h2>\n//       <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\n//       {selectedImage && (\n//         <div>\n//           <h3>Selected Image:</h3>\n//           <img src={URL.createObjectURL(selectedImage)} alt=\"Selected\" />\n//         </div>\n//       )}\n//       {processedImage && (\n//         <div>\n//           <h3>Processed Image:</h3>\n//           <img src={processedImage} alt=\"Processed\" />\n//         </div>\n//       )}\n//     </div>\n//   );\n// }\n_s(ClientImg, \"YucHUDTNmSJ0fNDrj1cUXxWTdR0=\");\n_c = ClientImg;\nexport default ClientImg;\nvar _c;\n$RefreshReg$(_c, \"ClientImg\");","map":{"version":3,"names":["React","useState","Grid","Typography","jsxDEV","_jsxDEV","ClientImg","_s","selectedImage","setSelectedImage","processedImage","setProcessedImage","handleImageUpload","event","file","target","files","formData","FormData","append","response","fetch","method","body","ok","imageBlob","blob","imageUrl","URL","createObjectURL","console","error","status","container","spacing","children","item","xs","variant","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","src","alt","style","maxWidth","_c","$RefreshReg$"],"sources":["C:/Users/ianta/interior_design/interior_design/frontend/src/img_input/ClientImg.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\n\r\nfunction ClientImg() {\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const [processedImage, setProcessedImage] = useState(null);\r\n\r\n  const handleImageUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedImage(file);\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"image\", file);\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:8000/upload/\", {\r\n        method: \"POST\",\r\n        body: formData,\r\n      });\r\n      if (response.ok) {\r\n        const imageBlob = await response.blob();\r\n        const imageUrl = URL.createObjectURL(imageBlob);\r\n        setProcessedImage(imageUrl);\r\n      } else {\r\n        console.error(\"Error:\", response.status);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error uploading image:\", error);\r\n    }\r\n  };\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h6\">Selected Image</Typography>\r\n        <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n        {selectedImage && (\r\n          <div>\r\n            <img\r\n              src={URL.createObjectURL(selectedImage)}\r\n              alt=\"Selected\"\r\n              style={{ maxWidth: \"100%\" }}\r\n            />\r\n          </div>\r\n        )}\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <Typography variant=\"h6\">Processed Image</Typography>\r\n        {processedImage ? (\r\n          <div>\r\n            <img\r\n              src={processedImage}\r\n              alt=\"Processed\"\r\n              style={{ maxWidth: \"100%\" }}\r\n            />\r\n          </div>\r\n        ) : (\r\n          <Typography>No image processed yet</Typography>\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n//   return (\r\n//     <div>\r\n//       <h2>Image Uploader</h2>\r\n//       <input type=\"file\" accept=\"image/*\" onChange={handleImageUpload} />\r\n//       {selectedImage && (\r\n//         <div>\r\n//           <h3>Selected Image:</h3>\r\n//           <img src={URL.createObjectURL(selectedImage)} alt=\"Selected\" />\r\n//         </div>\r\n//       )}\r\n//       {processedImage && (\r\n//         <div>\r\n//           <h3>Processed Image:</h3>\r\n//           <img src={processedImage} alt=\"Processed\" />\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nexport default ClientImg;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}